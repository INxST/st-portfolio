---
import cn from '@/libs/cn';
interface Props {
  sub: string;
  title: string[];
  href: string;
  isSpHorizontal?: boolean;
}

const { sub, title, href, isSpHorizontal } = Astro.props;
const classNameWrapper = cn(
  'ts-top-title text-current flex data-[active="true"]:animate-text-focus-in'
);
const classNameContainer = cn('md:vertical-rl grid gap-2 md:gap-4', {
  'vertical-rl': !isSpHorizontal,
});
const classNameSub = cn('md:text-lg leading-none font-medium md:-mt-6', {
  '-mt-6': !isSpHorizontal,
});
const classNameMain = cn(
  'flex flex-col gap-2 md:gap-4 md:[&>span:nth-child(n+2)]:mt-[2.625rem] text-[2rem] md:text-[2.625rem] leading-none font-medium',
  {
    '[&>span:nth-child(n+2)]:mt-[2.625rem]': !isSpHorizontal,
  }
);
---

<h2 class={classNameWrapper}>
  <a href={href} class={classNameContainer}>
    <span class={classNameSub}>
      <span>{sub}</span>
    </span>

    <span class={classNameMain}>
      <span>{title[0]}</span>
      <span>{title[1]}</span>
    </span>
  </a>
</h2>

<script>
  const targets = document.querySelectorAll('.ts-top-title');
  // 表示領域に入ったらdata-activeをtrueにする
  targets.forEach(target => {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          target.setAttribute('data-active', 'true');
        }
      });
    });
    observer.observe(target);
  });
</script>
