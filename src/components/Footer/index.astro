---
import updatePath from '@/libs/updatePath';
import footerLinks from '@/data/footerLinks';
import FooterDisk from './FooterDisk.astro';
import Contact from './Contact.astro';
import snsLinks from '@/data/snsLinks';
interface Props {
  start: 'bottom' | 'center';
}
const { start } = Astro.props;
const path = Astro.url.pathname;
const isHome = path === '/';
---

<div
  id="footer-wrapper"
  class="relative w-full overflow-hidden"
  data-start={start}
>
  <footer
    id="footer"
    class="absolute -top-1/2 left-0 w-full -translate-y-1/2 overflow-hidden text-pampas bg-mine-shaft-texture"
  >
    <div class="container px-5 pt-[9rem] md:px-20 md:pt-[22rem]">
      <ul class="flex flex-row-reverse justify-center gap-8">
        {
          footerLinks.map(link => (
            <li class="relative flex flex-col items-center">
              {!isHome && link.href.includes(path) ? (
                <FooterDisk />
              ) : (
                isHome && link.href === '/' && <FooterDisk />
              )}
              <a
                href={
                  link.href.includes('mailto:')
                    ? link.href
                    : updatePath(link.href)
                }
                target={link.target}
                class={`ts-text-link text-xl leading-none vertical-rl ${isHome && link.href === '/' && 'text-silver-chalice'} ${!isHome && link.href.includes(path) && 'text-silver-chalice'}`}
                data-vertical="rl"
                data-stalker-color="bright"
              >
                {link.text}
              </a>
            </li>
          ))
        }
      </ul>

      <div class="mt-[15.5rem] hidden justify-end md:flex">
        <a
          href="#"
          class="ts-text-link ts-anchor font-serif-en text-lg"
          data-stalker-color="bright">BACK TO TOP</a
        >
      </div>

      <ul
        class="mt-28 flex flex-wrap items-center justify-center gap-x-7 gap-y-4 border-t border-emperor pt-10 font-serif-en md:mt-6 md:justify-between md:gap-8"
      >
        {
          snsLinks.map(link => (
            <li class="inline-block">
              <a
                href={link.href}
                target={link.target}
                class="ts-text-link md:text-xl"
                data-stalker-color="bright"
              >
                {link.text}
              </a>
            </li>
          ))
        }

        <li class="inline-block w-full text-center md:ml-auto md:w-auto">
          <small class="text-base text-silver-chalice">
            &copy; 2024 Taiki Sato
          </small>
        </li>
      </ul>
    </div>

    <div class="mt-9 pb-5 md:mt-10">
      <div class="contact">
        <a
          href="mailto:taaaaiki.mode@gmail.com?subject=お問い合わせ"
          target="_blank"
          class="group flex flex-nowrap whitespace-nowrap"
          data-stalker-color="bright"
          aria-label="GET IN CONTACT"
        >
          {Array.from({ length: 10 }).map(_ => <Contact />)}
        </a>
      </div>
    </div>
  </footer>
</div>

<style lang="scss">
  .contact {
    animation: infiniteScroll 40s infinite linear 0.5s both;
  }

  @keyframes infiniteScroll {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-100%);
    }
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  const footer = document.getElementById('footer');
  const wrapper = document.getElementById('footer-wrapper');
  if (footer && wrapper) {
    const height = footer.clientHeight;
    if (wrapper) wrapper.style.height = `${height}px`;
    const start = wrapper?.dataset.start;
    const startValue = start === 'top' ? 'top bottom' : 'top center';

    gsap
      .timeline({
        scrollTrigger: {
          trigger: wrapper,
          start: () => `${startValue}`,
          end: () => `+=${height * 0.9}`,
          scrub: true,
        },
      })
      .to(footer, { top: '50%', ease: 'Power4.out' });
  }
</script>
